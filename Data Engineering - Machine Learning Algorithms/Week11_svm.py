# -*- coding: utf-8 -*-
"""lecture11_SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ejAdxR_sMSFDhcVlzpiQpIPqWHLOwutE
"""

# SVM Support Vector Machines

# SVM with Linear Kernel
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

data = pd.read_csv("Week11_data_tumor.csv")

data.drop(["id","Unnamed: 32"],axis=1,inplace=True)
# malignant = M  
# benign = B     

M = data[data.diagnosis == "M"]
B = data[data.diagnosis == "B"]

# scatter plot
plt.scatter(M.radius_mean,M.texture_mean,color="red",label="malignant",alpha= 0.3)
plt.scatter(B.radius_mean,B.texture_mean,color="green",label="benign",alpha= 0.3)
plt.xlabel("radius_mean")
plt.ylabel("texture_mean")
plt.legend()
plt.show()

data.diagnosis = [1 if each == "M" else 0 for each in data.diagnosis]
y = data.diagnosis.values
x_data = data.drop(["diagnosis"],axis=1)


# normalization 
x = (x_data - np.min(x_data))/(np.max(x_data)-np.min(x_data))

# train test split
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=1)

# Linear SVM
 
from sklearn.svm import SVC
 
svclassifier = SVC(kernel='linear')
svclassifier.fit(x_train,y_train)

y_pred = svclassifier.predict(x_test)
print(y_pred)

from sklearn.metrics import classification_report,confusion_matrix, plot_confusion_matrix
import matplotlib.pyplot as plt

cm=confusion_matrix(y_test,y_pred)
print(cm)

plot_confusion_matrix(svclassifier,x_test,y_test)


print(classification_report(y_test, y_pred))

# Non-Linear SVM
# polynomial Kernel
from sklearn.svm import SVC
svclassifier = SVC(kernel='poly', degree=5)
svclassifier.fit(x_train, y_train)

y_pred = svclassifier.predict(x_test)
print(y_pred)

from sklearn.metrics import classification_report,confusion_matrix, plot_confusion_matrix
import matplotlib.pyplot as plt

cm=confusion_matrix(y_test,y_pred)
print(cm)

plot_confusion_matrix(svclassifier,x_test,y_test)


print(classification_report(y_test, y_pred))

# Non-Linear SVM
# RBF Kernel "Gaussian"
from sklearn.svm import SVC
svclassifier = SVC(kernel='rbf')
svclassifier.fit(x_train, y_train)

y_pred = svclassifier.predict(x_test)
print(y_pred)

from sklearn.metrics import classification_report, plot_confusion_matrix
import matplotlib.pyplot as plt

cm=confusion_matrix(y_test,y_pred)
print(cm)
plot_confusion_matrix(svclassifier,x_test,y_test)


print(classification_report(y_test, y_pred))

# Plotting decision boundary and comparing between linear and non-linear kernels
import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm, datasets

def make_meshgrid(x, y, h=.02):
    
    x_min, x_max = x.min() - 1, x.max() + 1
    y_min, y_max = y.min() - 1, y.max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    return xx, yy


def plot_contours(ax, clf, xx, yy, **params):
    
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    out = ax.contourf(xx, yy, Z, **params)
    return out

# load data set
iris = datasets.load_iris()
# extract relevent features
X = iris.data[:, :2]
y = iris.target

# SVM regularization parameter
C = 1000000 
models = (svm.SVC(kernel='linear', gamma=0.7, C=C),
          svm.SVC(kernel='rbf', gamma=0.7, C=C))
models = (clf.fit(X, y) for clf in models)

# title for the plots
titles = ('SVC with linear kernel',
          'SVC with RBF kernel' )


fig, sub = plt.subplots(1,2)
plt.subplots_adjust(wspace=0.4, hspace=0.4)

X0, X1 = X[:, 0], X[:, 1]
xx, yy = make_meshgrid(X0, X1)

for clf, title, ax in zip(models, titles, sub.flatten()):
    plot_contours(ax, clf, xx, yy,
                  cmap=plt.cm.coolwarm, alpha=0.8)
    ax.scatter(X0, X1, c=y, cmap=plt.cm.coolwarm, s=20, edgecolors='k')
    ax.set_xlim(xx.min(), xx.max())
    ax.set_ylim(yy.min(), yy.max())
    ax.set_xlabel('Sepal length')
    ax.set_ylabel('Sepal width')
    ax.set_xticks(())
    ax.set_yticks(())
    ax.set_title(title)

plt.show()