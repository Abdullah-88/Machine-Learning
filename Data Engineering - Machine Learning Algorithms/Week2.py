# -*- coding: utf-8 -*-
"""lecture2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kZtSmPpB7KRyJO5woJFIQbD5vse5WuwU
"""

# List operations
family = ['father',1.73,'mother',1.68,'son',1.71,'daughter',1.7]

# subsetting

family[4]

family[-1]

family[7]

# list slicing  rule : [start:end] with start inclusive and end exclusive
family

family[3:5]

family[1:4]

family[:4]

family[5:]

# List manipulations
family

#changing list elements
family[7] = 1.69
family

family[6:] = ['grandfather',1.72]
family

# adding elements to list
family = family + ['daughter',1.69]
family

# deleting elements from list
del(family[4:6])
family

# appending to list
family.append('son')
family
family.append(1.71)
family

# removing from list
family.remove('grandfather')
family

family.remove(1.72)
family

family.index('son')

family.pop(6)

family

# inserting to a list
family.insert(6,'son')
family

# Python OOP
class Employee:
  raise_rate = 1.8
  counter = 0
  def __init__(self,name,surname,salary): #constructor
     self.name = name
     self.surname = surname
     self.salary = salary
     self.email = name + surname + "@asd.com"
     Employee.counter = Employee.counter + 1
  def giveNameSurname(self):
    return self.name + " " + self.surname
  def perform_raise(self):
    self.salary = self.salary + self.salary * self.raise_rate

# class variable
employee1 = Employee("ali", "veli",100) 
print("First salary: ",employee1.salary)
employee1.perform_raise()
print("New salary: ",employee1.salary)

employee2 = Employee("ayse", "hatice",200) 
employee3 = Employee("ayse", "yelda",600) 
employee4 = Employee("eren", "hilal",500)

employee_list = [employee1,employee2,employee3,employee4]

maximum_salary = -1
index = -1
for each in employee_list:
    if(each.salary>maximum_salary):
        maximum_salary = each.salary
        index = each
        
print(maximum_salary)
print(index.giveNameSurname())

#importing
import numpy as np

# numpy basics
array = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])  # 1*15 vector

print(array.shape)

a = array.reshape(3,5)
print("shape: ",a.shape)
print("dimension: ", a.ndim)

print("data type: ",a.dtype.name)
print("size: ",a.size)

array1 = np.array([[1,2,3,4],[5,6,7,8],[9,8,7,5]])
print(array1)

zeros = np.zeros((3,4))

zeros[0,0] = 5
print(zeros)

np.ones((3,4))

np.empty((2,3))

a = np.arange(10,55,5)
print(a)

a = np.linspace(10,50,20)
print(a)

a = np.array([[1,2,3],[4,5,6]])
b = np.array([[1,2,3],[4,5,6]])

# element wise prodcut
print(a*b)

a.dot(b.T)

a = np.random.random((5,5))*10

print(a.sum())
print(a.max())
print(a.min())

print(a.sum(axis=0))

print(a.sum(axis=1))